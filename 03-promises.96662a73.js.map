{"mappings":"qhBAAA,IAAAA,EAAAC,EAAA,SAEA,SAASC,EAAcC,EAAUC,GAC/B,OAAO,IAAIC,SAAQ,CAACC,EAASC,KAC3BC,YAAW,KACT,MAAMC,EAAS,C,SAAEN,E,MAAUC,GACLM,KAAKC,SAAW,GAEpCL,EAAQG,GAERF,EAAOE,EAAO,GAEfL,EAAM,G,CAIb,MAAMQ,EAAOC,SAASC,cAAc,SAEpCF,EAAKG,iBAAiB,UAAUC,MAAOC,IACrCA,EAAEC,iBAEF,MAAMC,EAAaP,EAAKE,cAAc,uBAChCM,EAAYR,EAAKE,cAAc,sBAC/BO,EAAcT,EAAKE,cAAc,wBAEjCV,EAAQkB,SAASH,EAAWI,OAC5BC,EAAOF,SAASF,EAAUG,OAC1BE,EAASH,SAASD,EAAYE,OAEpC,GAAIC,EAAO,GAAKpB,EAAQ,GAAKqB,GAAU,EAEnC,YADFC,EAAA1B,GAAS2B,OAAOC,QAAQ,4DAI1B,MAAMC,EAAW,GAEjB,IAAK,IAAIC,EAAI,EAAGA,EAAIL,EAAQK,IAC1BD,EAASE,KAAK7B,EAAc4B,EAAG1B,EAAQ0B,EAAIN,IAG7C,IAAK,MAAMQ,KAAWH,EACpB,IACE,MAAMpB,QAAeuB,EACrBN,EAAA1B,GAAS2B,OAAOM,QAAQ,uBAAqBxB,EAAIN,eAAoBM,EAAEL,U,CACvE,MAAO8B,GACPR,EAAA1B,GAAS2B,OAAOC,QAAQ,sBAAoBM,EAAE/B,eAAmB+B,EAAE9B,U","sources":["src/js/03-promises.js"],"sourcesContent":["import Notiflix from 'notiflix';\n\nfunction createPromise(position, delay) {\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      const result = { position, delay };\n      const shouldResolve = Math.random() > 0.3;\n      if (shouldResolve) {\n        resolve(result);\n      } else {\n        reject(result); \n      }\n    }, delay);\n  });\n}\n\nconst form = document.querySelector('.form');\n\nform.addEventListener(\"submit\", async (e) => {\n  e.preventDefault(); \n\n  const delayInput = form.querySelector('input[name=\"delay\"]');\n  const stepInput = form.querySelector('input[name=\"step\"]');\n  const amountInput = form.querySelector('input[name=\"amount\"]');\n\n  const delay = parseInt(delayInput.value);\n  const step = parseInt(stepInput.value);\n  const amount = parseInt(amountInput.value);\n\n  if (step < 0 || delay < 0 || amount <= 0) {\n    Notiflix.Notify.failure('❌ Please enter valid values for step, delay, and amount.');\n    return; \n  }\n\n  const promises = [];\n\n  for (let i = 0; i < amount; i++) {\n    promises.push(createPromise(i, delay + i * step));\n  }\n\n  for (const promise of promises) {\n    try {\n      const result = await promise;\n      Notiflix.Notify.success(`✅ Fulfilled promise ${result.position} in ${result.delay}ms`);\n    } catch (error) {\n      Notiflix.Notify.failure(`❌ Rejected promise ${error.position} in ${error.delay}ms`);\n    }\n  }\n});"],"names":["$7Y9D8","parcelRequire","$47d4ff9957288465$var$createPromise","position","delay","Promise","resolve","reject","setTimeout","result","Math","random","$47d4ff9957288465$var$form","document","querySelector","addEventListener","async","e","preventDefault","delayInput","stepInput","amountInput","parseInt","value","step","amount","$parcel$interopDefault","Notify","failure","promises","i","push","promise","success","error"],"version":3,"file":"03-promises.96662a73.js.map"}