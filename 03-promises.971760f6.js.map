{"mappings":"qhBAAA,IAAAA,EAAAC,EAAA,SAEA,SAASC,EAAcC,EAAUC,GAC/B,OAAO,IAAIC,SAAQ,CAACC,EAASC,KAC3BC,YAAW,KACT,MAAMC,EAAS,C,SAAEN,E,MAAUC,GACLM,KAAKC,SAAW,GAEpCL,EAAQG,GAERF,EAAOE,EAAO,GAEfL,EAAM,G,CAIb,MAAMQ,EAAOC,SAASC,cAAc,SAEpCF,EAAKG,iBAAiB,UAAUC,MAAOC,IACrCA,EAAEC,iBAEF,MAAMC,EAAaP,EAAKE,cAAc,uBAChCM,EAAYR,EAAKE,cAAc,sBAC/BO,EAAcT,EAAKE,cAAc,wBAEjCQ,EAAQC,SAASJ,EAAWK,OAC5BC,EAAOF,SAASH,EAAUI,OAC1BE,EAASH,SAASF,EAAYG,OAEpC,GAAIC,EAAO,GAAKH,EAAQ,GAAKI,GAAU,EACrCC,EAAA3B,GAAS4B,OAAOC,QAAQ,iEAI1B,IAAK,IAAIC,EAAI,EAAGA,GAAKJ,EAAQI,IAC3B5B,EAAc4B,EAAGR,GACdS,MAAK,EAAC5B,SAAEA,EAAQC,MAAEA,MACjBuB,EAAA3B,GAAS4B,OAAOI,QAAQ,uBAAqB7B,QAAiBC,MAAU,IAEzE6B,OAAM,EAAC9B,SAAEA,EAAQC,MAAEA,MAClBuB,EAAA3B,GAAS4B,OAAOC,QAAQ,sBAAoB1B,QAAiBC,MAAU,IAE3EkB,GAASG,C","sources":["src/js/03-promises.js"],"sourcesContent":["import Notiflix from 'notiflix';\n\nfunction createPromise(position, delay) {\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      const result = { position, delay };\n      const shouldResolve = Math.random() > 0.3;\n      if (shouldResolve) {\n        resolve(result);\n      } else {\n        reject(result); \n      }\n    }, delay);\n  });\n}\n\nconst form = document.querySelector('.form');\n\nform.addEventListener(\"submit\", async (e) => {\n  e.preventDefault();\n\n  const delayInput = form.querySelector('input[name=\"delay\"]');\n  const stepInput = form.querySelector('input[name=\"step\"]');\n  const amountInput = form.querySelector('input[name=\"amount\"]');\n\n  const delay = parseInt(delayInput.value);\n  const step = parseInt(stepInput.value);\n  const amount = parseInt(amountInput.value);\n\n  if (step < 0 || delay < 0 || amount <= 0) {\n    Notiflix.Notify.failure('❌ Please enter valid values for step, delay, and amount.');\n    return;\n  }\n\n  for (let i = 1; i <= amount; i++) {\n    createPromise(i, delay)\n      .then(({ position, delay }) => {\n        Notiflix.Notify.success(`✅ Fulfilled promise ${position} in ${delay}ms`);\n      })\n      .catch(({ position, delay }) => {\n        Notiflix.Notify.failure(`❌ Rejected promise ${position} in ${delay}ms`);\n      });\n    delay += step;\n  }\n});\n\n\n  // const promises = [];\n\n  // for (let i = 1; i < amount; i++) {\n  //   promises.push(createPromise(i, delay + i * step));\n  // }\n\n\n\n//    for (let i = 1; i <= amount; i++) {\n//     promises.push(createPromise(i, delay));\n//     delay += step;\n//   }\n\n//   for (const promise of promises) {\n//     try {\n//       const result = await promise;\n//       Notiflix.Notify.success(`✅ Fulfilled promise ${result.position} in ${result.delay}ms`);\n//     } catch (error) {\n//       Notiflix.Notify.failure(`❌ Rejected promise ${error.position} in ${error.delay}ms`);\n//     }\n//   }\n// });"],"names":["$7Y9D8","parcelRequire","$47d4ff9957288465$var$createPromise","position","delay","Promise","resolve","reject","setTimeout","result","Math","random","$47d4ff9957288465$var$form","document","querySelector","addEventListener","async","e","preventDefault","delayInput","stepInput","amountInput","delay1","parseInt","value","step","amount","$parcel$interopDefault","Notify","failure","i","then","success","catch"],"version":3,"file":"03-promises.971760f6.js.map"}