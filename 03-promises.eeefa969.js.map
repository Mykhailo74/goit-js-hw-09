{"mappings":"AAG2C,SAA5BA,EAAcC,EAAUC,GAC/B,OAAO,IAAIC,SAAQ,CAACC,EAASC,KAC3BC,YAAW,KACT,MAAMC,EAAS,C,SAAEN,E,MAAUC,GACLM,KAAKC,SAAW,GAEpCL,EAAQG,GAEQF,EAATE,EAAO,GAEfL,EAAM,G,CAKY,MAAnBQ,EAAOC,SAASC,eAAe,eAGlBF,EAAdG,iBAAiB,UAAUC,MAAOC,IACrCA,EAAEC,iBAE6B,MAAzBC,EAAaP,EAAKQ,cAAc,uBAChCC,EAAYT,EAAKQ,cAAc,sBAC/BE,EAAcV,EAAKQ,cAAc,wBAEjChB,EAAQmB,SAASJ,EAAWK,OAC5BC,EAAOF,SAASF,EAAUG,OAC1BE,EAASH,SAASD,EAAYE,OAE9BG,EAAW,GAGU,IAAtB,IAAIC,EAAI,EAAGA,EAAIF,EAAQE,IAC1BD,EAASE,KAAK3B,EAAc0B,EAAGxB,EAAQwB,EAAIH,IAIxB,IAAhB,MAAMK,KAAWH,EACpB,IACE,MAAMlB,QAAeqB,EACrBC,QAAQC,IAAI,uBAAqBvB,EAAIN,eAAoBM,EAAEL,U,CAC3D,MAAO6B,GACPF,QAAQC,IAAI,sBAAoBC,EAAE9B,eAAmB8B,EAAE7B,U","sources":["src/js/03-promises.js"],"sourcesContent":["// import { Notify } from 'notiflix/build/notiflix-notify-aio';\n\n // Функція для створення промісу зі затримкою\n      function createPromise(position, delay) {\n        return new Promise((resolve, reject) => {\n          setTimeout(() => {\n            const result = { position, delay };\n            const shouldResolve = Math.random() > 0.3;\n            if (shouldResolve) {\n              resolve(result); // Виконувати проміс\n            } else {\n              reject(result); // Відхиляти проміс\n            }\n          }, delay);\n        });\n      }\n\n      // Отримуємо посилання на форму\n      const form = document.getElementById(\"promiseForm\");\n\n      // Обробник подачі форми\n      form.addEventListener(\"submit\", async (e) => {\n        e.preventDefault(); // Забороняємо стандартну подію форми\n\n        const delayInput = form.querySelector('input[name=\"delay\"]');\n        const stepInput = form.querySelector('input[name=\"step\"]');\n        const amountInput = form.querySelector('input[name=\"amount\"]');\n\n        const delay = parseInt(delayInput.value);\n        const step = parseInt(stepInput.value);\n        const amount = parseInt(amountInput.value);\n\n        const promises = [];\n\n        // Створюємо promises і додаємо їх до масиву\n        for (let i = 0; i < amount; i++) {\n          promises.push(createPromise(i, delay + i * step));\n        }\n\n        // Очікуємо виконання всіх promises\n        for (const promise of promises) {\n          try {\n            const result = await promise;\n            console.log(`✅ Fulfilled promise ${result.position} in ${result.delay}ms`);\n          } catch (error) {\n            console.log(`❌ Rejected promise ${error.position} in ${error.delay}ms`);\n          }\n        }\n      });\n\n// function createPromise(position, delay) {\n//   const shouldResolve = Math.random() > 0.3;\n//   if (shouldResolve) {\n//     // Fulfill\n//   } else {\n//     // Reject\n//   }\n// }\n"],"names":["$47d4ff9957288465$var$createPromise","position","delay","Promise","resolve","reject","setTimeout","result","Math","random","$47d4ff9957288465$var$form","document","getElementById","addEventListener","async","e","preventDefault","delayInput","querySelector","stepInput","amountInput","parseInt","value","step","amount","promises","i","push","promise","console","log","error"],"version":3,"file":"03-promises.eeefa969.js.map"}